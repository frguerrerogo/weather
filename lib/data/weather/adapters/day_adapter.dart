import 'package:weather/data/core/adapters/index.dart' show Adapter, HourAdapter, RealmAdapter;
import 'package:weather/data/core/models/index.dart' show DayModel;
import 'package:weather/data/core/realm/index.dart' show DayRealm;
import 'package:weather/domain/core/entities/index.dart' show Day;

class DayAdapter extends Adapter<Day, DayModel> with RealmAdapter<Day, DayRealm> {
  final HourAdapter _hourAdapter;

  DayAdapter({required HourAdapter hourAdapter}) : _hourAdapter = hourAdapter;

  @override
  Day modelToEntity(DayModel model) {
    return Day(
      datetime: model.datetime ?? '',
      datetimeEpoch: model.datetimeEpoch ?? 0,
      tempmax: model.tempmax ?? 0.0,
      tempmin: model.tempmin ?? 0.0,
      temp: model.temp ?? 0.0,
      feelslikemax: model.feelslikemax ?? 0.0,
      feelslikemin: model.feelslikemin ?? 0.0,
      feelslike: model.feelslike ?? 0.0,
      dew: model.dew ?? 0.0,
      humidity: model.humidity ?? 0.0,
      precip: model.precip ?? 0.0,
      precipprob: model.precipprob ?? 0.0,
      precipcover: model.precipcover ?? 0.0,
      preciptype: model.preciptype ?? [],
      snow: model.snow ?? 0.0,
      snowdepth: model.snowdepth ?? 0.0,
      windgust: model.windgust ?? 0.0,
      windspeed: model.windspeed ?? 0.0,
      winddir: model.winddir ?? 0.0,
      pressure: model.pressure ?? 0.0,
      cloudcover: model.cloudcover ?? 0.0,
      visibility: model.visibility ?? 0.0,
      solarradiation: model.solarradiation ?? 0.0,
      solarenergy: model.solarenergy ?? 0.0,
      uvindex: model.uvindex ?? 0.0,
      severerisk: model.severerisk ?? 0.0,
      sunrise: model.sunrise ?? '',
      sunriseEpoch: model.sunriseEpoch ?? 0,
      sunset: model.sunset ?? '',
      sunsetEpoch: model.sunsetEpoch ?? 0,
      moonphase: model.moonphase ?? 0.0,
      conditions: model.conditions ?? '',
      description: model.description ?? '',
      icon: model.icon ?? '',
      stations: model.stations ?? [],
      source: model.source ?? '',
      hours: (model.hours ?? []).map(_hourAdapter.modelToEntity).toList(),
    );
  }

  @override
  DayModel entityToModel(Day entity) {
    return DayModel(
      datetime: entity.datetime,
      datetimeEpoch: entity.datetimeEpoch,
      tempmax: entity.tempmax,
      tempmin: entity.tempmin,
      temp: entity.temp,
      feelslikemax: entity.feelslikemax,
      feelslikemin: entity.feelslikemin,
      feelslike: entity.feelslike,
      dew: entity.dew,
      humidity: entity.humidity,
      precip: entity.precip,
      precipprob: entity.precipprob,
      precipcover: entity.precipcover,
      preciptype: entity.preciptype,
      snow: entity.snow,
      snowdepth: entity.snowdepth,
      windgust: entity.windgust,
      windspeed: entity.windspeed,
      winddir: entity.winddir,
      pressure: entity.pressure,
      cloudcover: entity.cloudcover,
      visibility: entity.visibility,
      solarradiation: entity.solarradiation,
      solarenergy: entity.solarenergy,
      uvindex: entity.uvindex,
      severerisk: entity.severerisk,
      sunrise: entity.sunrise,
      sunriseEpoch: entity.sunriseEpoch,
      sunset: entity.sunset,
      sunsetEpoch: entity.sunsetEpoch,
      moonphase: entity.moonphase,
      conditions: entity.conditions,
      description: entity.description,
      icon: entity.icon,
      stations: entity.stations,
      source: entity.source,
      hours: entity.hours.map(_hourAdapter.entityToModel).toList(),
    );
  }

  @override
  DayRealm entityToRealm(Day entity) {
    return DayRealm(
      entity.datetime,
      entity.datetimeEpoch,
      entity.tempmax,
      entity.tempmin,
      entity.temp,
      entity.feelslikemax,
      entity.feelslikemin,
      entity.feelslike,
      entity.dew,
      entity.humidity,
      entity.precip,
      entity.precipprob,
      entity.precipcover,
      entity.snow,
      entity.snowdepth,
      entity.windgust,
      entity.windspeed,
      entity.winddir,
      entity.pressure,
      entity.cloudcover,
      entity.visibility,
      entity.solarradiation,
      entity.solarenergy,
      entity.uvindex,
      entity.severerisk,
      entity.sunrise,
      entity.sunriseEpoch,
      entity.sunset,
      entity.sunsetEpoch,
      entity.moonphase,
      entity.conditions,
      entity.description,
      entity.icon,
      entity.source,
      hours: entity.hours.map(_hourAdapter.entityToRealm),
      preciptype: entity.preciptype.map((e) => e),
      stations: entity.stations.map((e) => e),
    );
  }

  @override
  Day realmToEntity(DayRealm realm) {
    return Day(
      datetime: realm.datetime,
      datetimeEpoch: realm.datetimeEpoch,
      tempmax: realm.tempmax,
      tempmin: realm.tempmin,
      temp: realm.temp,
      feelslikemax: realm.feelslikemax,
      feelslikemin: realm.feelslikemin,
      feelslike: realm.feelslike,
      dew: realm.dew,
      humidity: realm.humidity,
      precip: realm.precip,
      precipprob: realm.precipprob,
      precipcover: realm.precipcover,
      preciptype: realm.preciptype,
      snow: realm.snow,
      snowdepth: realm.snowdepth,
      windgust: realm.windgust,
      windspeed: realm.windspeed,
      winddir: realm.winddir,
      pressure: realm.pressure,
      cloudcover: realm.cloudcover,
      visibility: realm.visibility,
      solarradiation: realm.solarradiation,
      solarenergy: realm.solarenergy,
      uvindex: realm.uvindex,
      severerisk: realm.severerisk,
      sunrise: realm.sunrise,
      sunriseEpoch: realm.sunriseEpoch,
      sunset: realm.sunset,
      sunsetEpoch: realm.sunsetEpoch,
      moonphase: realm.moonphase,
      conditions: realm.conditions,
      description: realm.description,
      icon: realm.icon,
      stations: realm.stations,
      source: realm.source,
      hours: realm.hours.map(_hourAdapter.realmToEntity).toList(),
    );
  }
}
